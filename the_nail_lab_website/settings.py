"""
Django settings for the_nail_lab project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

from decouple import config, Csv

import sys

from django.conf.urls import static
from django.urls import reverse_lazy

import dj_database_url
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
if not SECRET_KEY:
    raise RuntimeError("SECRET_KEY environment variable not set")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default='False').lower() in ('true', '1', 'yes')




ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv())



# Application definition

GOOGLE_AUTHENTICATION = [
    'social_django',
]

PROJECT_APPS = [
    'studio',
    'accounts.apps.AccountsConfig',  # BECAUSE OF THE SIGNAL, TO PREVENT ERROR DUPLICATION WHEN MIGRATING
    'services',
    'photos',
    'appointments',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

] + PROJECT_APPS + GOOGLE_AUTHENTICATION

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # GOOGLE
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'the_nail_lab_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'studio.context_processors.user_role_context',
                # To show in nav bar rest day for employee on every page.
                # Without this setting, it shows rest day only on homepage!

                # GOOGLE
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'the_nail_lab_website.wsgi.application'

AUTHENTICATION_BACKENDS = [
    'accounts.authentication.LogInWithEmail',
    'django.contrib.auth.backends.ModelBackend',

    # GOOGLE BACKENDS
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if 'test' in sys.argv:
    print(">>> Running in test mode: using in-memory SQLite database.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }
elif os.environ.get('RENDER') == 'True':
    print(">>> Running on Render: using DATABASE_URL")
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            ssl_require=False,
        )
    }
else:
    print(">>> Running locally: using manual PostgreSQL settings")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'bg'

TIME_ZONE = 'Europe/Sofia'

USE_I18N = True

LANGUAGES = [
    ('bg', 'Български'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'accounts' / 'locale',
]

USE_TZ = True


CSRF_COOKIE_SECURE = True  # only https sending
SESSION_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = True   # can't get it with document.cookie


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

MEDIA_URL = '/media_files/'
MEDIA_ROOT = BASE_DIR / 'media_files'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.BaseUser'
LOGIN_REDIRECT_URL = reverse_lazy('homepage')
LOGOUT_REDIRECT_URL = reverse_lazy('login')

# GOOGLE SETTINGS_____________________________________
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

LOGIN_URL = reverse_lazy('login')
LOGOUT_URL = reverse_lazy('logout')
SOCIAL_AUTH_LOGIN_REDIRECT_URL = reverse_lazy('homepage')
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False  # Since using HTTP locally
SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'http://localhost:8000/auth/complete/google-oauth2/'

SOCIAL_AUTH_PIPELINE = [
    # 1. Get info from Google
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',

    # 2. IF there is a user with this email → CONNECT
    'social_core.pipeline.social_auth.associate_by_email',  # FIX: if email already exists

    # 3. Preparing the user
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',

    # 4. Connecting social account with the user
    'social_core.pipeline.social_auth.associate_user',

    # 5. CUSTOM LOGIC (safe, already has `user`)
    'accounts.pipeline.create_client_profile',  # Creating client
    'accounts.pipeline.check_profile_data',     # Redirecting if no password/ph. number

    # 6. Loading additional data
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
]


# Helps social_django generate absolute URLs correctly
SOCIAL_AUTH_STRATEGY = 'social_django.strategy.DjangoStrategy'


#  ____________________________________________________
